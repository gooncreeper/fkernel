fkernel
		Prelimentary
This document specifies the behavor and standard data structures of the fkernel.

The fkernel interface has four main goals
	1. Minimality
	2. Portability
	3. No restrictions
	4. No deferences, memory loss, or dangling kernel pointers

		Kernel Objects
This sections specifies different objects that the kernel can create. Objects shall
be named in the following format,
	HEX_UID: [MEMORY_TYPE] BASE_NAME [BASE_ABREVIATION]

	MEMORY_TYPE:
		N: No memory is allocated.
		P: Object shall have memory allocated in physical memory
		L: Object shall have memory allocated in logical memory

	Generic
[L] Kernel Executable [kernel]

[P/L] Memory  [mem]
[P/L] Region  [reg]
[P/L] Segment [seg]

[L] 32-bit Kernel State [ks32]
[L] 64-bit Kernel State [ks64]

[L] 16-bit Object Array [oa16]
[L] 32-bit Object Array [oa32]
[L] 64-bit Object Array [oa64]

	Big Endian
[L] Big-Endian 32-bit Thread State [be_ts32]
[L] Big-Endian 64-bit Thread State [be_ts64]

[L] Big-Endian 16-bit Object Array [be_oa16]
[L] Big-Endian 32-bit Object Array [be_oa32]
[L] Big-Endian 64-bit Object Array [be_oa64]

	x86 Generic
[L] X86 Interupt [x86_interrupt]
[L] X86 Syscall  [x86_syscall]

[L] X86 Global Descriptor Table [x86_gdt]
[L] X86 Local  Descriptor Table [x86_ldt]
[L] X86 Thread State Segment    [x86_tss]

[L] X86 64-bit Global Descriptor Table [x86_gdt64]
[L] X86 64-bit Local  Descriptor Table [x86_ldt64]
[L] X86 64-bit Thread State Segment    [x86_tss64]

[N] X86 Model Specific Register [x86_msr]

	x86 Paging
[L] X86 Paging Base                         [x86_pb]
[L] X86 64-bit Paging Base                  [x86_pb64]

[P] X86 Page Table                          [x86_pt]
[P] X86 Page Directory                      [x86_pd]
[P] X86 Page Directory Pointer Table        [x86_pdpt]
[P] X86 64-bit Page Table                   [x86_pt64]
[P] X86 64-bit Page Directory               [x86_pd64]
[P] X86 64-bit Page Directory Pointer Table [x86_pdpt64]
[P] X86 PML4                                [x86_PML4]
[P] X86 PML5                                [x86_PML5]


	Kernel Instructions
This section defines different instructions a thread can have the kernel
execute. The format is as follows:
	HEX_UID: CALL_MNEMONIC(TYPE PARAMATER, ...)

	Generic
source(OBJECT object)
origin(OBJECT oa)
base_origin()

start     () source=object
size      () source=object
dependants() source=object
type      () source=object

relocate(INDEX freed, OBJECT memory) source=object
move    (INDEX dest                ) source=object
free    (                          ) source=object

create(INDEX dest) source=memory

merge
concat

 read_memory(ADDR output, ADDR offset, SIZE size) source=memory
write_memory(ADDR data  , ADDR offset, SIZE size) source=memory
 copy_memory(OBJECT dest, ADDR source_offset, ADDR dest_offset, SIZE size) source=source

concat_memory(OBJECT/OUTPUT memory, OBJECT other_memory)

	create_kernel(OUTPUT output, OBJECT memory, ADDR data)

	free_object(OBJECT object)


MEMORY DETAILS:
	Memory Structures
[structure] - [size][unit]
	LOWER BYTES
	MOST  SIGNIFIGANT BITS
		## CONDITION ##
	[n][unit][use] [info] - [label]
	...
		## END ##
	LEAST SIGNIFIGANT BITS
	HIGHER BYTES

	Units
b - bit
B - byte (8b)
H - 16-bit word (16b)
D - 32-bit word (32b)
Q - 64-bit word (64b)
h - half object word (1w / 2) # Division is rounded down if decimal
w - object word (corresponding to the object's bits)

	Use:
z - size
p - logical  address pointer
y - phYsical address pointer
o - object pointer
  - other

	Info
[F] - value can be calculated in constant time with previous fields
[A] - alignment
[P] - padding
[R] - reserved - must be ignored & preserved

	Object Array
Data - [SIZE]
	[8w] Entry ...

Entry - [8w]
		## MEMORY ALLOCATED ##
	[1wp] Start
	[1wz] Size
		## END ##

		## NO MEMORY ALLOCATED ##
	[2w ] Extended Local Object Data
		## END ##

	[1w ] Dependants
	[1w ] Type

	[2w ] Local Object Data

	[1w ] Multi-processer Lock
	[1w ] [R]

Local Object Data - [2w]
	[2wp] Address Base


	Region / Segment
Local Object Data - [2w]
	[2w - 12b] [R]
	?? Caching ??

	[1b] Logical Read
	[1b] Logical Write
	[1b] Logical Execute

	[1b] Physical Read
	[1b] Physical Write
	[1b] Physical Executeh

	Model Specific Register
Local Object Data - [2w]
	[1w] Readable Bits
	[1w] Writable Bits

Extended Local Object Data - [2w]
	[2w] MSR

	Paging Base
Memory - [4w]
	[1o ] Kernel Paging Base
	[1o ] Next Paging Base
	[1o ] Last Paging Base
	[1o ] Object

Local Object Data - [2w]
	[2w ] Page Base Type
