------------
Prelimentary
------------

This document specifies the behavor and required data structures for the
fkernel.

The fkernel interface has four main goals
	1. Minimality
	2. Portability
	3. Restrictionless
	4. No deferences, memory loss, or dangling kernel pointers

We strictly focus on the following hardware
	1. CPU
	2. RAM (minus valid addresses)

Requirements for an architecture to fit into the fkernel model / API:
	1. 8-bit byte
	2. (for multi-processor support) 2-byte mutexes

-----------------
Memory Structures
-----------------

[structure] - [size][unit]
	LOWER BYTES
	MOST SIGNIFIGANT BITS
		## IF CONDITION ##
	[n][unit][use] [info] - [label]
	...
		## ELSEIF CONDITION ##
		## END ##
	LEAST SIGNIFIGANT BITS
	HIGHER BYTES

	Units
b - bit
B - byte (8b)
H - 16-bit word (16b)
D - 32-bit word (32b)
Q - 64-bit word (64b)
h - half object word (1w / 2) # Division is rounded down if decimal
w - object word (corresponding to the object's bits)

	Use
z - size
p - logical  address pointer
y - phYsical address pointer
o - object pointer
  - other

	Info
[F] - value can be calculated in constant time with previous fields
[A] - alignment
[P] - padding
[R] - reserved - must be ignored & preserved

-----------------------
Kernel Objects Overview
-----------------------

This sections specifies different objects that the kernel can create. Objects shall
be named in the following format,
	HEX_UID: [MEMORY_TYPE] BASE_NAME [BASE_ABREVIATION]

	Generic
Physical Memory   [phys]
Kernel Executable [kernel]

Kernel Address Space [ka]
User   Address Space [ua]

Memory  [mem]
Region  [reg]
Segment [seg]

	Little Endian
32-bit Kernel State [ks32]
64-bit Kernel State [ks64]

16-bit Object Array [oa16]
32-bit Object Array [oa32]
64-bit Object Array [oa64]

	Big Endian
Big-Endian 32-bit Kernel State [be_ks32]
Big-Endian 64-bit Kernel State [be_ks64]

Big-Endian 16-bit Object Array [be_oa16]
Big-Endian 32-bit Object Array [be_oa32]
Big-Endian 64-bit Object Array [be_oa64]

	x86 Generic
X86 Interupt [x86_interrupt]
X86 Syscall  [x86_syscall]

X86 Global Descriptor Table [x86_gdt]
X86 Local  Descriptor Table [x86_ldt]
X86 Thread State Segment    [x86_tss]

X86 64-bit Global Descriptor Table [x86_gdt64]
X86 64-bit Local  Descriptor Table [x86_ldt64]
X86 64-bit Thread State Segment    [x86_tss64]

X86 Model Specific Register [x86_msr]

	x86 Paging
X86 Page Table                          [x86_pt]
X86 Page Directory                      [x86_pd]
X86 Page Directory Pointer Table        [x86_pdpt]
X86 64-bit Page Table                   [x86_pt64]
X86 64-bit Page Directory               [x86_pd64]
X86 64-bit Page Directory Pointer Table [x86_pdpt64]
X86 PML4                                [x86_PML4]
X86 PML5                                [x86_PML5]

--------------------------
Kernel Object Descriptions
--------------------------

------------------------
Kernel Function Overview
------------------------

This section defines kernel functions thread can call. The format is as
follows:
	HEX_UID: CALL_MNEMONIC(TYPE PARAMATER, ...)

	Generic
source(OBJECT object)
origin(OBJECT oa)
base_origin()

start     () source=object
size      () source=object
dependants() source=object
type      () source=object

relocate(INDEX freed, OBJECT memory) source=object
move    (INDEX dest                ) source=object
free    (                          ) source=object

create(INDEX dest) source=memory

merge
concat

 new_memory(INDEX dest, ADDR start, SIZE size)
invd_memory() source=object

 new_region(INDEX dest, ADDR start, SIZE size)
invd_region() source=object

---------------------------
Kernel Function Error Codes
---------------------------
[0] No error
[1] Not permitted
[2] Field too large
[3] Start address not encodable in object array

----------------------------
Kernel Function Descriptions
----------------------------

	new_memory(INDEX dest, ADDR start, SIZE size)
Creates a -memory- object at index `dest` starting at `start` with the size
of `size`.

This function exists for the case when new memory is added to the system and
should not be granted if new memory is not expected / can't be added to the
system.

	invd_memory() source=object
Destroys the -memory- object at `source`.

Errors:
[0] If dependents != 0

---------------------------------
Objects in Memory Representations
---------------------------------

	Mutexes
Mutexes provide exclusive access to objects for kernel calls on multi-processor systems. They can be
any value while the kernel is running but must be zero on entry to the kernel.

--	Object Array
Data - [SIZE]
	[8w] Entry ...

Entry - [8w]
	[1w ] Type

		## IF MEMORY ALLOCATED ##
	[1wp] Start
	[1wz] Size
		## ELSEIF NO MEMORY ALLOCATED ##
	[2w ] Extended Local Object Data
		## END ##

	[1w ] Dependants

	[2w ] Local Object Data

	[1w ] Mutex

	[1w ] [R]

Local Object Data - [2w]
	[2wp] Address Base

--	Region / Segment
Local Object Data - [2w]
	[2wp]

--	Model Specific Register
Local Object Data - [2w]
	[1w] Readable Bits
	[1w] Writable Bits

Extended Local Object Data - [2w]
	[2w] MSR

--	Paging Base
Memory - [4w]
	[1o ] Kernel Paging Base
	[1o ] Next Paging Base
	[1o ] Last Paging Base
	[1o ] Object

Local Object Data - [2w]
	[2w ] Page Base Type
